{"ast":null,"code":"var _jsxFileName = \"/home/zaki/All/Documents/Textivo/client/src/contexts/ConversationsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nconst ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n  const addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n        return conversation;\n      });\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return {\n        ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return {\n      ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, children);\n}\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}","map":{"version":3,"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","createElement","Provider","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","a","b","length","sort","every","element"],"sources":["/home/zaki/All/Documents/Textivo/client/src/contexts/ConversationsProvider.js"],"sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n  const socket = useSocket()\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, { recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\n    setConversations(prevConversations => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          }\n        }\n\n        return conversation\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [\n          ...prevConversations,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setConversations])\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToConversation)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToConversation])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n\n    addMessageToConversation({ recipients, text, sender: id })\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}